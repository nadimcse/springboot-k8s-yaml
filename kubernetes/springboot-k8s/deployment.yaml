---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spring-boot-k8s-sa
  namespace: test
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: spring-boot-k8s-sa-role
  namespace: test
rules:
  - apiGroups: [""]
    resources: ["pods","configmaps", "services"]
    verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: spring-boot-k8s-sa-view
  namespace: test
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: spring-boot-k8s-sa-role
subjects:
  - kind: ServiceAccount
    namespace: test
    name: spring-boot-k8s-sa
---
apiVersion: v1
data:
  application.yaml: |-
    {
        "app-detail": {
          "name": "spring-boot-k8",
          "group": "java 17"
        }
    }
kind: ConfigMap
metadata:
  name: spring-boot-k8s-config-appyaml
  namespace: test
---
apiVersion: v1
data:
  spring.cloud.config.enabled: "false"
  spring.cloud.kubernetes.config.enableApi: "false"
  spring.cloud.kubernetes.config.name: "spring-boot-k8s-config-appyaml"
  spring.cloud.kubernetes.config.namespace: "test"
  spring.cloud.kubernetes.config.paths: "/config"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: spring-boot-k8s
  name: spring-boot-k8s-config
  namespace: test
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-k8s
  namespace: test
spec:
  selector:
    matchLabels:
      app: spring-boot-k8s
  replicas: 1
  progressDeadlineSeconds: 60
  template:
    metadata:
      labels:
        app: spring-boot-k8s
        namespace: test
    spec:
      containers:
      - name: spring-boot-k8s
        image: doc185174/springboot-k8s-example:20.0
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: spring-boot-k8s-config
        ports:
          - containerPort: 8080
        lifecycle:
          preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - sleep 30
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
#        resources:
#          limits:
#            cpu: "800m"
#            memory: "800Mi"
#          requests:
#            cpu: "200m"
#            memory: "600Mi"
        volumeMounts:
          - mountPath: /config
            name: config-volume
#      serviceAccount: spring-boot-k8s-sa
#      serviceAccountName: spring-boot-k8s-sa
      volumes:
        - configMap:
            defaultMode: 420
            name: spring-boot-k8s-config-appyaml
          name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  name: springboot-k8s-svc
  namespace: test
spec:
  selector:
    app: spring-boot-k8s
  ports:
    - protocol: "TCP"
      port: 80
      targetPort: 8080
#  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: self-signed-ca-issuer
  name: springboot-k8s-ing
  namespace: test
spec:
  ingressClassName: nginx
  rules:
    - host: pink.butterfly-np.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: springboot-k8s-svc
                port:
                  number: 80
  tls:
    - hosts:
        - pink.butterfly-np.com
      secretName: pink-ca-secret